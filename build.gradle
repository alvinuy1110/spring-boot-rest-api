/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'auy' at '23/02/16 6:54 PM' with Gradle 2.7
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.7/userguide/tutorial_java_projects.html
 */
import org.apache.tools.ant.filters.ReplaceTokens
buildscript {
    repositories {
    	jcenter();
/*
        maven {
            url "${artifactory_url}/jcenter"
            name "artifactory-libary"
        //    credentials {
        //        username "${artifactory_user}"
        //        password "${artifactory_password}"
        //    }
        }   
        maven {
            url "${artifactory_url}/plugins-release-local"
            name "artifactory-plugins"
        //    credentials {
        //        username "${artifactory_user}"
        //        password "${artifactory_password}"
        //    }
        }         
        */
         maven {
     		 url "https://plugins.gradle.org/m2/"
    	}
        
    }
    dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
     //   classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
		classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.1"
    }
}



// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

jar {
    baseName = 'spring-boot-webapp-api'
    version =  '1.0.0-SNAPSHOT'
}
repositories {
    // mavenCentral()
    jcenter()
    /*
    maven {
        url "${artifactory_url}/jcenter"
        name "artifactory"
        credentials {
            username "${artifactory_user}"
            password "${artifactory_password}"
        }
    }	 
    */  

}

ext {
	// app default info
    app_name="Spring Boot Sample API"
 	app_description="Spring Boot Sample API"
	app_version="1.0.0-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {

  compile("org.springframework.boot:spring-boot-starter-hateoas")

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'
  compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude module: "hibernate-entitymanager"
   }
    compile("org.hibernate:hibernate-entitymanager:4.3.10.Final")
	compile("com.h2database:h2:1.4.187")
	compile("org.springframework.boot:spring-boot-starter-actuator"){
        exclude module: "logback-classic"
    }   
	compile 'com.google.guava:guava:19.0'
	compile 'io.springfox:springfox-swagger2:2.0.1'
	
    testCompile("com.jayway.jsonpath:json-path")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'junit:junit:4.12'
    
    testCompile("org.mockito:mockito-core:1.10.19")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

// apply file filtering
processResources {
    filter ReplaceTokens, tokens: [
        "app_name": project.property("app_name"),
        "app_description": project.property("app_description"),
        "app_version": project.hasProperty('buildNumber') ? project['buildNumber'] : project.property("app_version")

    ]
}


sonarqube {
  properties {
    property "sonar.projectName", "Sample-API"
    
    // has to be unique key
    property "sonar.projectKey", "com.myproject:sample-api"
   }
}

// Add jacoco:  to execute 'gradle jacoco'. For module: gradle Module:jacocoTestReport
task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    subprojects.each {
       sourceSets it.sourceSets.main
    }

	// reports setting
    reports {
		 xml{
            enabled true
         	destination "${buildDir}/reports/jacoco/jacoco.xml"
         }
         csv.enabled false
         html{
         	enabled true
            destination "${buildDir}/reports/jacoco"
         }    

    }
}